/*
    Project Euler problem #2

    Even Fibonacci numbers
    -----------------------------

    Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
    By starting with 1 and 2, the first 10 terms will be:
                1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
    find the sum of the even-valued terms.

*/

 
 let nextNumber:      number
 let limit:           number = 4000000
 let fibonacciSeries: Array<number> = []


 function generateFibonacciSeries (prevNumber1: number, prevNumber2: number) : number { 

    nextNumber = prevNumber1 + prevNumber2 
    if (nextNumber >= limit) {
        return -1
    }
    fibonacciSeries.push(nextNumber)
    return generateFibonacciSeries (prevNumber2, nextNumber)
 }


 function isEvenNumber (givenNumber: number) : boolean {
    if (givenNumber % 2 == 0) return true
    return false
 }


 function findTwoNumberSum (number1: number, number2: number) : number {
     return number1 + number2
 }


 function findEvenValuedSum () : number {
    fibonacciSeries.push(1)
    fibonacciSeries.push(2)
    generateFibonacciSeries (1, 2)
    let evenValuedSum: number = fibonacciSeries.filter(isEvenNumber).reduce(findTwoNumberSum)
    return evenValuedSum
 }


 console.time()
 let evenTermSum: number = findEvenValuedSum () // answer is 4613732
 console.timeEnd()
 // default: 0.535ms
 console.log ("Sum of even valued terms in fibonacci series is: ", evenTermSum )